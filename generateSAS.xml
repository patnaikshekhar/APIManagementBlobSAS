<policies>
    <inbound>
        <base />
        <set-variable name="accessKey" value="{{storageAccountAccessKey}}" />
        <set-variable name="storageAccount" value="{{storageAccount}}" />
        <set-variable name="containerName" value="{{containerName}}" />

        <set-variable name="fileName" value="@((string)context.Request.MatchedParameters["name"])" />

        <!-- Type of resource to be signed - Blob in this case -->
        <set-variable name="signedresource" value="b" />
        <set-variable name="signedstart" value="@(DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"))" />
        <set-variable name="signedexpiry" value="@(DateTime.UtcNow.AddMinutes(5).ToString("yyyy-MM-ddTHH:mm:ssZ"))" />
        <set-variable name="signedversion" value="2018-03-28" />

        <!-- Permissions being granted - Create in this case -->
        <set-variable name="signedpermissions" value="c" />
        <set-variable name="signedIP" value="" />
        <set-variable name="signedidentifier" value="" />
        <set-variable name="signedProtocol" value="" />
        <set-variable name="rscc" value="" />
        <set-variable name="rscd" value="" />
        <set-variable name="rsce" value="" />
        <set-variable name="rscl" value="" />
        <set-variable name="rsct" value="" />

        <set-variable name="canonicalizedresource" value="@{
            return string.Format("/blob/{0}/{1}/{2}",
            (string)context.Variables["storageAccount"],
            (string)context.Variables["containerName"],
            (string)context.Variables["fileName"]);
            }" />

        <set-variable name="StringToSign" value="@{
                return string.Format(
                    "{0}\n{1}\n{2}\n{3}\n{4}\n{5}\n{6}\n{7}\n{8}\n{9}\n{10}\n{11}\n{12}",
                    (string)context.Variables["signedpermissions"],
                    (string)context.Variables["signedstart"],
                    (string)context.Variables["signedexpiry"],
                    (string)context.Variables["canonicalizedresource"],
                    (string)context.Variables["signedidentifier"],
                    (string)context.Variables["signedIP"],
                    (string)context.Variables["signedProtocol"],
                    (string)context.Variables["signedversion"],
                    (string)context.Variables["rscc"],
                    (string)context.Variables["rscd"],
                    (string)context.Variables["rsce"],
                    (string)context.Variables["rscl"],
                    (string)context.Variables["rsct"]
                );
            }" />

        <set-variable name="Signature" value="@{
                System.Security.Cryptography.HMACSHA256 hasher = new System.Security.Cryptography.HMACSHA256(Convert.FromBase64String((string)context.Variables["accessKey"]));
                return Convert.ToBase64String(hasher.ComputeHash(System.Text.Encoding.UTF8.GetBytes((string)context.Variables["StringToSign"])));
            }" />
        
        <set-variable name="CompleteSASURL" value="@{
            return string.Format(
                "https://{0}.blob.core.windows.net/{1}/{2}?sv={3}&sr={4}&sig={5}&st={6}&se={7}&sp={8}",
                (string)context.Variables["storageAccount"],
                (string)context.Variables["containerName"],
                (string)context.Variables["fileName"],
                (string)context.Variables["signedversion"],
                (string)context.Variables["signedresource"],
                (string)context.Variables["Signature"],
                (string)context.Variables["signedstart"],
                (string)context.Variables["signedexpiry"],
                (string)context.Variables["signedpermissions"]
            );
        }" />

        <return-response>
            <set-status code="201" />
            <set-header name="Content-Type" exists-action="override">
                <value>text/plain</value>
            </set-header>
            <set-body>@((string)context.Variables["CompleteSASURL"])</set-body>
        </return-response>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>